/*
 * Copyright (C) 2015 Eistec AB
 *
 * This file is subject to the terms and conditions of the GNU Lesser General
 * Public License v2.1. See the file LICENSE in the top level directory for more
 * details.
 */

/**
 * @ingroup cpp11-compat
 * @{
 *
 * @file
 * @brief C++ runtime support functions
 *
 * Tested with GCC-4.9.2 and Clang-3.6
 *
 * @author  Joakim Gebart <joakim.gebart@eistec.se>
 */
extern "C" {
#include "panic.h"
#include <stddef.h>
}

/**
 * @brief DSO handle
 *
 * This symbol is used by dynamic shared objects to identify them, but it is
 * somehow pulled in as a dependency by the compiler-generated global (static)
 * constructor code.
 */
void *__dso_handle = NULL;

/**
 * @brief Definition of a pure virtual function
 *
 * Calling this function is an error.
 */
extern "C" void __cxa_pure_virtual ()
{
    core_panic(123, "PURE VIRTUAL CALL");
}

/**
 * @brief Register a function to be called by exit or when a shared library is unloaded.
 *
 * Not really used on an embedded system where you pull the power to shut down
 * the program.
 *
 * This is only called by code automatically generated by the C++ compiler.
 *
 * Return value: 0 on success, non-zero on failure.
 */
extern "C" int __cxa_atexit (void (*) (void *), void *, void *)
{
  /* We just pretend everything is dandy. */
  return 0;
}


/** \todo Implement operator new nothrow variant (C++11) */

#if 0
/* Base implementations of new and delete */
void* operator new (unsigned size)
{
    void *storage = malloc(size);
    if(storage == NULL) {
        throw "ENOMEM";
    }
}

void * operator new[] (unsigned size)
{
    // call your memory allocation routine
    return 0;
}

void operator delete (void*)
{
    // call your memory free routine
}

void operator delete[] (void*)
{
    // call your memory free routine
}
#endif /* 0 */

/** @} */
